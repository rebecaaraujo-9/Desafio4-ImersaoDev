Desafio 4: Guilherme quer um aviso caso a pessoa coloque algo que não é uma imagem no input e também não aceitar esse input. Rafa quer que possa clicar no banner do filme e redirecionar para trailer no youtube. Paulo quer que mantenha uma lista de filmes adicionados, guardar em memória.

basicamente: se a imagem terminar com jpg, jpeg ou png, o filme selecionado vai poder entrar pra lista pra DEPOIS ser exibido em outra função que será criada logo em seguida, a saber função "recarregar filmes".A  escrita deve ser lida ao contrário, primeiro o nome da lista, depois o comando push para enviar o elemento para a lista, e então sim o elemento a ser enviado: "listaNomesFilmes.push(nomeFilme);"

então ele finalmente executa o laço que será atribuído em outra função

agora sim vamos criar outras duas funções que estarão funcionando dentro da função "principal" de adicionar filmes. dentro delas vamos criar os atributos e um laço de repetição

finalmente, essa última função irá limpar o input para que possa adicionar outros filmes sem precisar limpar manualmente

"document.getElementById('trailerFilme').value='';" aqui usamos .value e definimos como null pois é utilizado para campos de formulário como o input

Recapitulando: O método usado foi dividido em etapas e utilizando funções. Funções funcionam como componentes, onde você pode criar uma função e utilizar outras vezes durante o código sem precisar escrever tudo novamente. Funções recebem atributos e podemos colocar loop dentro delas e até mesmo outras funções. 

1- No caso desse desafio, criou-se primeiro variáveis para armazenar o valor dos filmes (nome, imagem e trailer). Depois, criamos a primeira função, onde criamos variáveis separadas para cada elemento (nome, imagem e trailer) e o atribuímos a lista criada anteriormente no primeiro passo com a condição que as imagens terminassem com jpg, jpeg ou png, também definindo o valor nulo para que essas imagens não fossem armazenadas. Nesse caso ao rodar o código a mensagem de erro é nula pois não há erro kkk. Através desse trecho do código nós enviamos os elementos para a lista através de suas respectivas variáveis (nomeFilme, imgFilme e trailerFilme). Em seguida, já definimos que se a imagem não for nos formato especificado, é exibida uma mensagem de erro. Aqui usamos o inner.HTML pois vamos modificar o valor de nulo para a string definida, a saber "Endereço de imagem inválido. Tente Novamente." (getElementById é um elemento que faz parte do document e é utilizado para obter uma referência de um elemento HTML com base no valor "id", enquanto o innerHTML é uma propriedade que permite acessar ou alterar o conteúdo HTML interno de um elemento.). Depois de definir o que acontece se a imagem for válida OU não, podemos chamar outras funções que criamos nos passos 2 e 3, a de recarregar filmes e limpar os campos.

2- criamos a função recarregar filmes, dentro dela criamos uma nova variável que está atrelada ao listaFilmes criado no HTML. Depois atribuímos valor nulo e iniciamos o nosso loop com a utilização de for. Depois modificamos o valor do elemento inserindo e finalmente atrelando os valores que atribuímos antes, com a utilização de [i] e também o operador de += para ADICIONAR elementosao invés de SUBSTITUÍ-LOS.

3- por fim, criamos a função limpa campos para que não seja necessário limpar manualmente.